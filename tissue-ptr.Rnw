\documentclass{article}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage{chemarrow}
\usepackage[margin=.5in]{geometry}

\begin{document}

\title{Data Analysis}
\author{Alexander Franks}
\date{\today}
\maketitle

Introduction to analysis.

\tableofcontents
\newpage

<<results='hide',echo=TRUE,warning=FALSE,message=FALSE,label=initialize,cache=TRUE>>=

    options(stringsAsFactors=FALSE)
opts_chunk$set(cache.path = 'cache/',fig.path = 'figs/')

library(ggplot2)
library(scales)
library(corrplot)
library(RColorBrewer)
library(mvtnorm)
library(fdrtool)
library(xtable)
library(grid)
source("util_functions.R")

protein <- as.matrix(read.csv("protein.csv",row.names=1))
mrna <- as.matrix(read.csv("mrna.csv",row.names=1))
ratios <- as.matrix(read.csv("ratio.csv",row.names=1))

## tissues to use in the analysis (we exclude uterus)
tissue.names <- colnames(protein)[2:12]
pretty.tissue.names <- sapply(tissue.names,strFormat)
n.tissues <- length(tissue.names)
n.genes <- nrow(protein)

mrna <- mrna[,tissue.names]
protein <- protein[,tissue.names]

## Normalize proteins against protein[,1]
## and normalize mrna's against mrna[,1]
for(i in 2:length(tissue.names)){

    print(colnames(protein)[i])
    print(lm((protein[,1]-protein[,i])~1)$coefficients)
    print(lm((mrna[,1]-mrna[,i])~1)$coefficients)
    
    protein[,i] <- protein[,i]+lm((protein[,1]-protein[,i])~1)$coefficients
    mrna[,i] <- mrna[,i]+lm((mrna[,1]-mrna[,i])~1)$coefficients

}

tissue.ratios <- (10^protein)/(10^mrna)
median.ratios <- apply(tissue.ratios,1,function(x) median(x,na.rm=TRUE))
prediction.ratios <- log10((10^protein)/((10^mrna)*median.ratios))
predicted.raw <- (10^mrna)*median.ratios
@



\section*{Figure 1}

<<results='hide',fig.height=6,fig.width=12, label=figure-1,dependson=c("initialize"),echo=FALSE,warning=FALSE>>=

    grid.newpage()
pushViewport(viewport(layout = grid.layout(1,2)))

keep.indices <- which(log10(predicted.raw)!=protein)
cor.raw <- cor(log10(predicted.raw[keep.indices]),as.numeric(protein[keep.indices]))

print(
    ggplot(data=data.frame(x=predicted.raw[keep.indices],y=10^as.numeric(protein[keep.indices])),aes(x=x,y=y))+
    geom_point(colour="blue",alpha=0.03)+
    scale_x_log10(breaks=10^(1:10),label=scientific_10,limits=c(10^2,10^8))+
    scale_y_log10(breaks=10^(1:10),labels=scientific_10,limits=c(10^2,10^8))+
    labs(x="Scaled mRNA",y="Measured Protein",title="")+
    annotate("text", x = 10^3, y = 10^7,label=as.character(as.expression(substitute(italic(R)[T]^2~"="~r2,list(r2=round(cor.raw^2,digits=2))))),parse=TRUE,size=10)+
    annotate("text", x = 10^3, y = 10^7.6,label=as.character(as.expression(substitute(italic(R)[T]~"="~r,list(r=round(cor.raw,digits=2))))),parse=TRUE,size=10)+
    theme(axis.title.x = element_text(face="bold",size=30),
          axis.text.x  = element_text(size=30),
          axis.title.y = element_text(face="bold",size=30),
          axis.text.y  = element_text(size=30,hjust=0)),
    
    vp=viewport(layout.pos.row=1,layout.pos.col=1)
    
    )


rsquared.vec <- c()
negative.slopes <- c()
negative.slopes.vals <- c()
for(i in 1:nrow(protein)){
    if(sum(!is.na(predicted.raw[i,])&!is.na(protein[i,]))>1){
        lm.fit <- lm(protein[i,]~log10(predicted.raw)[i,])
        slope <- lm.fit$coefficients[2]
        rsq <- summary(lm.fit)$r.squared
        if(rsq<1 & sum(!is.na(predicted.raw[i,]*protein[i,]))>4)
            rsquared.vec <- c(rsquared.vec,rsq)
        if(slope<0){
            negative.slopes <- c(negative.slopes,i)
            negative.slopes.vals <- c(negative.slopes.vals,slope)
        }
    }
}



full.protein <- names(which(apply(protein[negative.slopes,],1,function(x) sum(!is.na(x)))==n.tissues&apply(predicted.raw[negative.slopes,],1,function(x) sum(!is.na(x)))==n.tissues))

sort(rowMeans(protein[full.protein,]))
focus.prot <- "ENSG00000111640"


mrna.vec <- as.numeric(t(log10(predicted.raw)))
protein.vec <- as.numeric(t(protein))
id <- rep(rownames(mrna),each=n.tissues)
df <- data.frame(x=mrna.vec,y=protein.vec,id=id)

mean.prot <- rowMeans(protein[full.protein,])
large.prots <- sample(names(mean.prot[mean.prot>6.5]),10)
sub.proteins <- unique(c(large.prots,sample(unique(id)[negative.slopes],100)))
       
df.sub <- df[df$id %in% sub.proteins,]
cor.segs <- cor(df.sub$x,df.sub$y,use="complete.obs")

print(
ggplot(data=df.sub,aes(x=x,y=y))+geom_smooth(method=lm,se=FALSE,aes(group=id),colour=alpha("black",0.5))+scale_x_continuous(breaks=1:10,label=function(x) parse(text=paste("10^", x)),limits=c(2,9))+
    scale_y_continuous(breaks=1:10,labels=function(x) parse(text=paste("10^", x)),limits=c(2,9))+
    labs(x="Scaled mRNA",y="Measured Protein")+
    annotate("text", x = 3, y = 8,label=as.character(as.expression(substitute(italic(R)[T]^2~"="~r2,list(r2=round(cor.segs^2,digits=2))))),parse=TRUE,size=10)+
    annotate("text", x = 3, y = 8.5,label=as.character(as.expression(substitute(italic(R)[T]~"="~r,list(r=round(cor.segs,digits=2))))),parse=TRUE,size=10)+
    theme(axis.title.x = element_text(face="bold",size=30),
          axis.text.x  = element_text(size=30),
          axis.title.y = element_text(face="bold",size=30),
          axis.text.y  = element_text(size=30,hjust=0))+
    geom_point(data=data.frame(x=log10(predicted.raw[focus.prot,]),y=protein[focus.prot,],Tissue=tissue.names),aes(x=x,y=y,label=length(tissue.names):1,color=Tissue),size=3)+#scale_colour_discrete(guide=FALSE)+
    theme(legend.text=element_text(size=15),legend.title.align=0.5,
          legend.background=element_rect(fill=alpha("gray", 0.5)),legend.key=element_blank(),legend.title=element_text(size=14)) +
    guides(colour = guide_legend(override.aes = list(size=5)))+
    geom_smooth(data=data.frame(x=log10(predicted.raw[focus.prot,]),y=protein[focus.prot,]),method=lm,se=FALSE,colour="black",size=1.5)+theme(legend.justification=c(1,0), legend.position=c(1,0)),
vp=viewport(layout.pos.row=1,layout.pos.col=2)
)

@

\section*{Figure 2}

<<results='hide',fig.height=8,fig.width=12, label=figure-2,dependson=c("initialize"),echo=FALSE,warning=FALSE>>=

    grid.newpage()
pushViewport(viewport(layout = grid.layout(2,3)))

fold.comparison.tissues <- c("prostate","kidney","thyroid.gland")
fold.combos <- combn(fold.comparison.tissues,2)

for(i in 1:ncol(fold.combos)){

    t1 <- fold.combos[1,i]
    t2 <- fold.combos[2,i]

    pred <- log10(tissue.ratios[,t2]*10^mrna[,t1])
    raw <- protein[,t1]
    keep <- which(pred!=raw)
    pred <- pred[keep]
    raw <- raw[keep]
    cor.raw <- cor(pred,raw,use="complete.obs")^2
    
print(
        ggplot(data=data.frame(mrna=pred,protein=raw))+geom_point(aes(x=mrna,y=protein),colour="blue",alpha=0.3)+
        scale_x_continuous(breaks=1:10,labels=function(x) parse(text=paste("10^", x)),limits=c(2,8))+
        scale_y_continuous(breaks=1:10,labels=function(x) parse(text=paste("10^", x)),limits=c(2,8))+
        labs(x=sprintf("%s mRNA scaled by %s PTR",strFormat(t1),strFormat(t2)),
             y=sprintf("Measured protein in %s",strFormat(t1)))+
        annotate("text", x = 3, y = 7.5,label=as.character(as.expression(substitute(italic(R)~"="~r,list(r=format(cor.raw,digits=2))))),parse=TRUE,size=10)+
        annotate("text", x = 3, y = 7,label=as.character(as.expression(substitute(italic(R)^2~"="~r2,list(r2=format(cor.raw^2,digits=2))))),parse=TRUE,size=10)+
        theme(axis.title.x = element_text(face="bold",size=22),
          axis.text.x  = element_text(size=30),
          axis.title.y = element_text(face="bold",size=30),
              axis.text.y  = element_text(size=30,hjust=0)),
    vp=viewport(layout.pos.row=1,layout.pos.col=i)
    )

}

for(i in 1:ncol(fold.combos)){

    t1 <- fold.combos[1,i]
    t2 <- fold.combos[2,i]

    fold.cor <- cor(mrna[,t1]-mrna[,t2],protein[,t1]-protein[,t2],use="complete.obs")

    print(
        ggplot(data=data.frame(mrna=10^(mrna[,t1]-mrna[,t2]),protein=10^(protein[,t1]-protein[,t2])))+geom_point(aes(x=mrna,y=protein),colour="blue",alpha=0.3)+
    scale_x_log10(breaks=10^(-2:2),label=scientific_10,limits=c(10^-2,10^2))+
    scale_y_log10(breaks=10^(-3:3),labels=scientific_10,limits=c(10^-3,10^3))+
    labs(x="mRNA Fold Change",y="Protein Fold Change")+
    annotate("text", x = 10^-1.2, y = 10^2.5,label=as.character(as.expression(substitute(italic(R)~"="~r,list(r=round(fold.cor,digits=3))))),parse=TRUE,size=10)+
    annotate("text", x = 10^-1.2, y = 10^2,label=as.character(as.expression(substitute(italic(R)^2~"="~r2,list(r2=round(fold.cor^2,digits=3))))),parse=TRUE,size=10)+
    theme(axis.title.x = element_text(face="bold",size=30),
          axis.text.x  = element_text(size=30),
          axis.title.y = element_text(face="bold",size=30),
          axis.text.y  = element_text(size=30,hjust=0)),
        vp=viewport(layout.pos.row=2,layout.pos.col=i)        
 )
    
    
    
    
}
@ 

\section*{Figure 3}
<<results='hide',fig.height=5,fig.width=12,label=figure-3,dependson=c("initialize"),echo=FALSE,warning=FALSE>>=

par(mfrow=c(1,2))

cors.mat <- matrix(0,nrow=n.tissues,ncol=n.tissues)
rownames(cors.mat) <- colnames(cors.mat) <- tissue.names
combinations <- combn(tissue.names,2)
for(i in 1:ncol(combinations)){

    t1 <- combinations[1,i]
    t2 <- combinations[2,i]
    
    cr <- cor(mrna[,t1]-mrna[,t2],protein[,t1]-protein[,t2],use="pairwise.complete.obs")
    print(cr)
    
    cors.mat[combinations[1,i],combinations[2,i]] <- cors.mat[combinations[2,i],combinations[1,i]] <- cr

}
rownames(cors.mat) <- colnames(cors.mat) <- sapply(rownames(cors.mat),strFormat)

### Correlation Matrix Plot For Fold Changes
col.pal <- colorRampPalette(c("#7F0000","red","#FF7F00","yellow","#7FFF7F", 
                             "cyan", "#007FFF", "blue","#00007F"))

corrplot(cors.mat, method = "number",cl.lim=c(0,.6),col=col.pal(100),diag=FALSE,tl.col="black",tl.cex=1.5,cl.cex=1.2,cl.align.text="l",mar=c(5,0,0,0))


max.errors <- apply(prediction.ratios,1,function(x) max(abs(x),na.rm=TRUE))
mean.protein <- apply(protein,1,mean)[max.errors!=-Inf]
max.errors <- max.errors[max.errors!=-Inf]

cdf2 <- ecdf(max.errors)
par(mar=c(5.1,5.1,4.1,2.1))

plot(function(x) cdf2(x),xlab="Fold Error",ylab="Fraction of Genes",xlim=c(0,2),ylim=c(0.02,1),main="",lwd=3,panel.first=grid(nx=8,lwd=2),yaxt="n",xaxt="n",cex.lab=2,font.lab=2)

axis(1,cex.axis=1.5,labels=parse(text=paste("10^",seq(0,2,by=0.5))),at=seq(0,2,by=0.5))
axis(2,cex.axis=1.5)
segments(x0=1,y=0,x1=1,y1=cdf2(1),col="red",lwd=3,lty=2)
segments(x0=-.5,y=cdf2(1),x1=1,y1=cdf2(1),col="red",lwd=3,lty=2)
segments(x0=log10(2),y=0,x1=log10(2),y1=cdf2(log10(2)),col="blue",lwd=3,lty=2)
segments(x0=-.5,y=cdf2(log10(2)),x1=log10(2),y1=cdf2(log10(2)),col="blue",lwd=3,lty=2)

## Fraction exceeding 2 fold error
frac2 <- round(1-cdf2(log10(2)),digits=2)
## Number of proteins
n2 <- ceiling(frac2*length(max.errors))

## Fraction exceeding 10 fold error
frac10 <- round(1-cdf2(1),digits=2)
## Number of proteins 
n10 <- ceiling(frac10*length(max.errors))

@ 

\Sexpr{100*frac2} percent of protein (\Sexpr{n2} of
\Sexpr{nrow(protein)}) have a maximum error exceeding two-fold.
\Sexpr{100*frac10} percent of protein (\Sexpr{n10} of
\Sexpr{nrow(protein)}) have a maximum error exceeding ten-fold.

\section*{Figure 5}

<<fig.width=4,fig.height=4,fig.align='center',label=figure-5, dependson("initialize"),echo=FALSE,warning=FALSE>>=

## TODO Update
pop.cor <- 0.35

Rprot.grid <- seq(pop.cor,1,by=0.01)
Rmrna.grid <- seq(pop.cor,1,by=0.01)
Rgrid <- expand.grid(Rprot.grid,Rmrna.grid)
rsq.grid <- matrix(pop.cor/sqrt(Rgrid[,1]*Rgrid[,2]),nrow=length(Rprot.grid))^2

rsq.grid[rsq.grid>1] <- 1
blues <- rep(brewer.pal(9,"Blues"),each=2)
cols <- sapply(1:17,function(i) avg.colors(blues[i],blues[i+1]))
cols <- brewer.pal(9,"Blues")
cols <- c("#08306B", "#08306B","#08306B","#08306B","#08306B","#08519C","#2171B5","#4292C6","#9ECAE1")
myFilledContour(x=Rmrna.grid, y=Rprot.grid, rsq.grid,col=rev(cols),xlab="Reliability of mRNA Measurements",ylab="Reliability of Protein Measurements",main="Fraction of Across-Tissue Protein Variance\n Explained By Transcript Levels",nlevels=10,cex.lab=2,cex.axis=1.5,cex.main=1.5)
text(0.9,0.9,"10%",cex=2,col="dark grey")
text(0.74,0.72,"20%",cex=2,col="dark grey")
text(0.65,0.6,"30%",cex=2,col="dark grey")
text(0.58,0.52,"40%",cex=2,col="dark grey")
text(0.48,0.45,"> 50%",cex=2,col="dark grey")
@ 
\section*{Supplement}

<<label=pop-cor,dependson("initialize"),echo=TRUE,warning=FALSE>>=

within.indices <- which(apply(!is.na(protein*predicted.raw),1,sum)>3)
within.cors <- sapply(within.indices,function(i) cor(protein[i,],log(predicted.raw)[i,],use="pairwise.complete.obs"))
between.cors <- sapply(1:ncol(protein),function(i) cor(protein[,i],log10(predicted.raw)[,i],use="pairwise.complete.obs"))
between.cors.raw <- sapply(1:ncol(protein),function(i) cor(protein[,i],mrna[,i],use="pairwise.complete.obs"))

n.pairwise <- rowSums(!is.na(protein*predicted.raw))
n.pairwise <- n.pairwise[n.pairwise>3]
ft <- fisher.transform(within.cors)

wts <- 1/(n.pairwise-3)
wts <- wts/sum(wts)
z <- sum(wts*ft)
pop.cor <- (exp(2*z)-1)/(exp(2*z)+1)

z.score<- (ft-pop.cor)*sqrt(n.pairwise-3)

fd.out <- fdrtool(z.score,plot=FALSE,verbose=FALSE)
@ 

Number of q-values less than 1\%: \Sexpr{sum(fd.out$qval<0.01)}
Number of q-values less than 10\%: \Sexpr{sum(fd.out$qval<0.1)}

<<fig.width=12,fig.height=4,fig.align='center',label=figure-S1, dependson("initialize"),echo=FALSE,warning=FALSE>>=

grid.newpage()
pushViewport(viewport(layout = grid.layout(1,3)))

## within tissue correlations
print(
    ggplot(data.frame(x=between.cors,x2=between.cors.raw,labels=tissue.names))+geom_histogram(aes(x=x,fill="Scaled"),binwidth=0.03,colour="black",size=0.1)+geom_histogram(aes(x=x2,fill="Raw"),binwidth=0.03,colour="black",size=0.1)+scale_x_continuous(limits=c(-1,1))+labs(x=expression(paste("Correlation, ", R[T])),y="",title="Within Tissue, Empirical")+
    theme(title = element_text(size=20),
          axis.title.x = element_text(face="bold",size=25),
          axis.text.x  = element_text(size=16),
          axis.text.y  = element_text(size=16,hjust=0),
          legend.text=element_text(size = 15, face = "bold"),
          legend.position=c(0.15,0.85))+
    guides(fill=guide_legend(title=NULL)),
    vp=viewport(layout.pos.row=1,layout.pos.col=1)
    )

## within gene correlations
print(
ggplot(data.frame(x=within.cors))+geom_histogram(aes(x=x,fill="within"),colour="black",binwidth=0.05,size=0.1)+labs(x=expression(paste("Correlation, ", R[P])),y="",title="Across Tissue, Empirical")+
    theme(title = element_text(size=20),
          axis.title.x = element_text(face="bold",size=25),
          axis.text.x  = element_text(size=16),
          axis.text.y  = element_text(size=16,hjust=0)) +
    scale_y_continuous(limits=c(0,300))+
    guides(fill=FALSE),
    vp=viewport(layout.pos.row=1,layout.pos.col=2)
)


## simulation within gene correlations
sim.within.cors <- sapply(1:length(z.score),function(i) cor(rmvnorm(n=n.pairwise[i],mean=c(0,0),sigma=matrix(c(1,pop.cor,pop.cor,1),nrow=2)))[1,2])

print(
ggplot(data.frame(x=sim.within.cors))+geom_histogram(aes(x=x,fill="within"),colour="black",binwidth=0.05,size=0.1)+labs(x=expression(paste("Correlation, ", R[P])),y="",title=expression(paste("Across Tissue, Simulated (",rho,"=0.35)",sep="")))+
    theme(title = element_text(size=20),
          axis.title.x = element_text(face="bold",size=25),
          axis.text.x  = element_text(size=16),
          axis.text.y  = element_text(size=16,hjust=0)) +
    scale_y_continuous(limits=c(0,300))+
    guides(fill=FALSE),
    vp=viewport(layout.pos.row=1,layout.pos.col=3)
)
@ 

<<fig.width=6,fig.height=6,fig.align='center',label=figure-S2,dependson=("initalize"),echo=FALSE,warning=FALSE,>>=

median.mrna <- median(as.vector(mrna),na.rm=TRUE)
te.mean <- apply(protein-mrna,1,function(x) median(x,na.rm=TRUE))

vgrid <- seq(0,0.5,by=0.01)
rsqgrid <- numeric(length(vgrid))
median.tissue.cor <- cors.full <- c()
count <- 1
for(vte in vgrid){

    efficiency_mat <- matrix(rnorm(n.genes*n.tissues,mean=rep(te.mean,n.tissues),sd=sqrt(vte)),ncol=n.tissues,nrow=nrow(protein))

    protein_mat <- mrna+efficiency_mat
    predicted.protein <- mrna+apply(efficiency_mat,1,median)

    keep <- !apply(protein_mat,1,function(x) all(is.na(x)))
    protein_mat <- protein_mat[keep,]
    predicted.protein <- predicted.protein[keep,]

    median.prot <- median(as.vector(protein_mat),na.rm=TRUE)
    half.indices <- protein_mat>median.prot

    cors.full <- c(cors.full,cor(as.vector(predicted.protein),as.vector(protein_mat),use="complete.obs"))

    median.tissue.cor <- c(median.tissue.cor,median(sapply(1:nrow(protein_mat),function(i) cor(predicted.protein[i,],protein_mat[i,],use="complete.obs")),na.rm=TRUE))

    rsqgrid[count] <- median(vte/apply(protein_mat,2,function(x) var(x,na.rm=TRUE)))
    count <- count+1
}


par(mar=c(6, 5.5, 4, 2))
plot(rsqgrid,cors.full^2,type="l",col="red",sub=expression(paste("Frac. of Unexplained Total Var., 1 - ",R[T]^2, "")),xlab="",ylab=expression(paste("R-Squared (",R^2,")")),font.axis=2,lwd=3,cex.lab=2,cex.sub=2,font.lab=2,font.axis=2,cex.axis=2,ylim=c(0,1),xlim=c(0,0.3))

real.frac <- median(apply(protein-mrna,1,function(x) var(x,na.rm=TRUE)),na.rm=TRUE)/apply(protein,2,function(x) var(x,na.rm=TRUE))
rect(min(real.frac), -1, max(real.frac), 2, density = NULL, col = "light grey",border=NA)

lines(rsqgrid,cors.full^2,col="red",lwd=3)
lines(rsqgrid,median.tissue.cor^2,lwd=3,cex.lab=2,font.lab=2,font.axis=2,cex.axis=1.5,col="blue",lty=2)

text(.25,0.85,c(expression(paste("",R[T]^2))),col="red",cex=2)
text(.25,.25,c(expression(paste("",R[P]^2))),col="blue",,cex=2)

@ 


\end{document}

